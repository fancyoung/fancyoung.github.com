<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 前端 | 没有标题的博客]]></title>
  <link href="http://fancyoung.com/blog/categories/qian-duan/atom.xml" rel="self"/>
  <link href="http://fancyoung.com/"/>
  <updated>2013-05-17T06:53:44+00:00</updated>
  <id>http://fancyoung.com/</id>
  <author>
    <name><![CDATA[思扬]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sass中通过mixin封装透明背景模块]]></title>
    <link href="http://fancyoung.com/blog/better-transparentize-mixin-for-sass/"/>
    <updated>2012-05-01T22:51:00+00:00</updated>
    <id>http://fancyoung.com/blog/better-transparentize-mixin-for-sass</id>
    <content type="html"><![CDATA[<p>之前讲到过<a href="/blog/css-background-transparency/">CSS实现背景透明完美解决方案</a>，<br/>
在Sass里可以通过mixin将其封装起来。</p>

<h2>先回顾一下</h2>

<p><code>
/* 白色背景,透明度0.6 */
.alpha60 {
  background: rgb(255, 255, 255);
  background: rgba(255, 255, 255, 0.6);
  background: transparent\9;
  zoom: 1;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99ffffff, endColorstr=#99ffffff);
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#99ffffff, endColorstr=#99ffffff)";
}
</code></p>

<h2>分析</h2>

<p>需要做的工作有：<br/>
&ndash; 颜色和透明值应该通过参数传入<br/>
&ndash; 需要能计算出rgba值：<code>rgb(255, 255, 255)</code><br/>
&ndash; 需要计算出IE下的值<code>#99ffffff</code><br/>
&ndash; 封装成minix模块，以便调用</p>

<h2>过程</h2>

<p>Sass的文档不全，为了查找一些计算函数，我只好去源码里找。<br/>
开始想寻求的是一个转十六进制的方法，结果发现<code>ie_hex_str</code>已经实现了。<br/>
在这里贴段里面的实现代码，来看看Sass的计算功能：<br/>
```</p>

<h1>Sass</h1>

<p>alpha = (color.alpha * 255).round.to_s(16).rjust(2, &lsquo;0&rsquo;)</p>

<h1>等价于JS中的：</h1>

<p>Math.round(0.6 * 255).toString(16);
```
最后的rjust方法，应该是空位补零。</p>

<p>非常有用的两个页面：
<a href="https://github.com/nex3/sass/blob/master/lib/sass/script/functions.rb">函数源码</a>，
<a href="http://sass-lang.com/try.html">在线调试Sass</a></p>

<h2>总结</h2>

<p>最终代码如下：
<code>
@mixin better_transparentize($color, $alpha)
  $c: rgba($color, $alpha)
  $ie_c: ie_hex_str($c)
  background: rgba($color, 1)
  background: $c
  background: transparent\9
  zoom: 1
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie_c}, endColorstr=#{$ie_c})
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie_c}, endColorstr=#{$ie_c})"
</code>
然后在需要的地方直接引用即可，如：
<code>
.box
  @include better_transparentize(white, .8)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012十大Web设计趋势]]></title>
    <link href="http://fancyoung.com/blog/web-design-trends-in-2012/"/>
    <updated>2011-12-15T15:03:00+00:00</updated>
    <id>http://fancyoung.com/blog/web-design-trends-in-2012</id>
    <content type="html"><![CDATA[<p>本不想取这么俗的标题,
可原文正好推荐了10个.<br/>
这回就不翻译原文,
记点自己的看法.</p>

<!--more-->


<h4>1. 响应式Web设计(Responsive Web Design)</h4>

<p>简单的说就是动态适应当前各种分辨率及设备(电脑, Pad, 手机, &hellip;)的页面方案.<br/>
常用的有弹性布局. 另, &ldquo;弹性图片"是个很有意思的东西.<br/>
<a href="http://beforweb.com/node/6">什么是响应式Web设计？怎样进行？</a><br/>
绝对是将来的方向,
但考虑到技术和设计的实现复杂度,
暂时还是用定宽网格吧.</p>

<h4>2. 固定导航条(Fixed-Position Navigation)</h4>

<p>如果不是ie6不支持<code>position:fixed</code>,<br/>
估计每个网站都会放几个固定元素.<br/>
常见的有: 顶部导航条, 底部工具条, &ldquo;回到顶部&rdquo;.</p>

<h4>3. 圆(Circles)</h4>

<p>圆圆的东西总能戳中人们的萌点,<br/>
比如: <a href="http://columnfivemedia.com/">columnfivemedia.com</a><br/>
网站用了两种方式实现圆:<br/>
顶部的两个圈圈用的是透明背景的png图,
中部并排的四个圈圈通过圆角实现
(只需将圆角设定大于宽/高的一半即可).</p>

<p>这个网站有意思的还有将鼠标指到圈圈上时,图片会动起来.<br/>
实现方法也非常简单,利用了CSS spirit.<br/>
将一张静态图和一张动态图拼接成git图,
再通过CSS实现显示部分.<br/>
(不用两张图是为了能同时加载, 以避免鼠标指上去时第二张图还没有加载.)
<iframe style="width: 420px; height: 230px" src="http://jsfiddle.net/zr4ac/embedded/result,html,css/light/"></iframe></p>

<h4>4. 大矢量图(Big Vector Art)</h4>

<h4>5. 多列菜单(Multi-Column Menus)</h4>

<h4>6. jQuery/CSS3/HTML5动画(Animation)</h4>

<h4>7. 缎带&amp;横幅(Ribbons &amp; Banner Graphics)</h4>

<p>一秒钟网页立体化, 元素变卡片.<br/>
可与固定位置配合使用(如:<a href="http://edgeguides.rubyonrails.org/getting_started.html">RoR教程, 见右上角的"edge"</a>).<br/>
你应该在某处已经看过了, 放几张图片例子:
<a href="http://365psd.com/day/2-23/"><img src="http://www.webpagescreenshot.info/img/184189-1216201135658am.png"></a>
<a href="http://365psd.com/day/2-183/"><img src="http://www.webpagescreenshot.info/img/491988-1216201135455am.png"></a></p>

<h4>8. 自定义字体风格(Custom Font Faces)</h4>

<p>这点就先不看了。人家只有26个字母，算上大小写也才52个。</p>

<h4>9. 信息可视化(Infographics)</h4>

<p>没技术含量, 就不写了.
<a href="http://www.cnblogs.com/lhb25/archive/2011/03/19/1988526.html">数据之美：Infographics 终极探索</a></p>

<h4>10. 专注于简约(Focus on Simplicity)</h4>

<h4>11. 视差滚动(Parallax Scrolling)</h4>

<p>这个是我自己加的，因为实在太炫了。<br/>
据说这是最经典的视差滚动：<a href="http://www.nikebetterworld.com/">Nike Better World</a><br/>
每页都有很多创意元素：<a href="http://www.beetle.com/">某汽车网站</a><br/>
从开发角度讲难度并不高，可能会有点点繁琐，<br/>
我想它没排进前十的原因大约是对设计者要求太高。<br/>
来份教程：<a href="http://coding.smashingmagazine.com/2011/07/12/behind-the-scenes-of-nike-better-world/">Behind The Scenes Of Nike Better World</a></p>

<h2>参考</h2>

<p>原文：<a href="http://webdesignledger.com/tips/web-design-trends-in-2012">Web Design Trends in 2012</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS实现背景透明完美解决方案]]></title>
    <link href="http://fancyoung.com/blog/css-background-transparency/"/>
    <updated>2011-11-29T16:44:00+00:00</updated>
    <id>http://fancyoung.com/blog/css-background-transparency</id>
    <content type="html"><![CDATA[<p>翻译自: <a href="http://robertnyman.com/2010/01/11/css-background-transparency-without-affecting-child-elements-through-rgba-and-filters/">CSS Background Transparency Without Affecting Child Elements, Through RGBa And Filters</a></p>

<p>当今的大部分网页设计都包含了半透明的元素.但用CSS实现想要的效果却没那么简单.</p>

<h2>现存的问题</h2>

<p>如果我们想要一个半透明背景,有两种实现方式:<br/>
&ndash; 利用CSS和opacity属性<br/>
&ndash; 建立一个24位PNG背景图片<br/>
用opacity的问题除了
<a href="http://robertnyman.com/2008/09/16/you-want-css-opacity-to-go-with-that-well-suit-yourself/">需要通过麻烦的语法来兼容所有浏览器</a>,
还有不单该元素自身背景透明了,它的子元素也会透明.
所以里面所有的文字也是透明的,这一般不是想要的效果.
你可以做一些CSS trick,通过建立额外的元素来解决这个问题,但这种解决方案很恶心.</p>

<p>用PNG的问题是会额外增加HTTP请求,
而且图片比几行css代码要大得多-
尤其考虑到图片不能太小以避免
<a href="http://robertnyman.com/2009/05/26/serious-memory-leak-issue-with-24-bit-png-images-with-alpha-transparency-in-internet-explorer/">IE下24位PNG图透明时引起的内存泄漏</a>.</p>

<!--more-->


<h2>解决方案</h2>

<p>这里提供一种方法:
<a href="http://en.wikipedia.org/wiki/RGBA_color_space">RGBa colors</a>.
它的美妙之处在于你可以通过设置RGB值和透明值,轻松的实现颜色透明.
代码如下:
<code>
.alpha60 {
  /* 用于不支持RGBa的浏览器 */
  background: rgb(0, 0, 0);
  /* RGBa, 透明度0.6 */
  background: rgba(0, 0, 0, 0.6);
}
</code>
透明将只对背景生效,很好很强大,对吧:)</p>

<h3>继续</h3>

<p>不幸的是IE不支持RGBa(IE678都不行).
幸运的是微软在2000年时疯狂的给IE加上了各种过滤器.
其中有一个是<a href="http://msdn.microsoft.com/en-us/library/ms532997(VS.85).aspx">渐变过滤器(the gradient filter)</a>,
我们只需要把开始结束都设置成一个颜色就可以了.
你现在会想,&ldquo;那我们怎么将其透明呢?&rdquo;.
你只需要用16进制值来定义颜色就可以了.
下面是用渐变过滤器实现和上面同等透明效果的代码:
<code>
.alpha60 {
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);
}
</code>
你可以看到定义里的8位16进制数字,
前两位代表透明度,接下来两位是红色,接着就是绿色和蓝色.
注意两位16进制颜色的范围是0~255(ff).
那我们怎么将<code>0.6</code>转化为16进制数呢?</p>

<p>这里就需要用到一些数学知识了.
基本上,我们只需要将需要的透明度(比如0.6)乘以255,再转化为16进制即可.
还有一个简单的办法是利用
<a href="http://www.google.com/help/features.html">Google’s Search Features</a>,
你只需要在Google里搜索
<a href="http://www.google.se/search?q=0.6+*+255+in+hex">0.6 * 255 in hex</a>
就能得到答案.
不过Google计算器仿佛只能处理整数,而
<a href="http://www.google.se/search?q=0.3+*+255+in+hex">0.3 * 255 in hex</a>
它便无法得出结果.</p>

<p>还有一种更快的方法就是利用JavaScript,
只需要在浏览器控制行里输入
<code>
Math.floor(0.6 * 255).toString(16);
</code>
便能得出结果.</p>

<h3>整合</h3>

<p>根据上面的方法,我们来写一个完整的实现:
<code>
.alpha60 {
  /* Fallback for web browsers that doesn't support RGBa */
  background: rgb(0, 0, 0);
  /* RGBa with 0.6 opacity */
  background: rgba(0, 0, 0, 0.6);
  /* For IE 5.5 - 7*/
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000);
  /* For IE 8*/
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000, endColorstr=#99000000)";
}
</code>
注意,我们还需要额外为IE定义<code>background: transparent</code>,
我们可以通过条件注释来解决.</p>

<h2>浏览器支持</h2>

<p>支持RGBa的有:<br/>
&ndash; firefox 3+<br/>
&ndash; Safari 2+<br/>
&ndash; Opera 10<br/>
IE过滤器支持IE5.5及以上版本.</p>

<p>所以这种方式几乎支持了所有浏览器.</p>

<h3>感谢</h3>

<p>Thanks to <a href="http://css-tricks.com/rgba-browser-support/">RGBa Browser Support</a> and
<a href="http://leaverou.me/2009/02/bulletproof-cross-browser-rgba-backgrounds/">Bulletproof, cross-browser RGBA backgrounds, today</a>
for the information and inspiration.</p>

<p>Thanks to <a href="http://friendlybit.com/">Emil Stenström</a> and <a href="http://kodfabrik.se/">Pelle Wessman</a>
for coming up with countless alternatives for hex conversion, and explaining basic math to stupid me.</p>

<h2>译者总结</h2>

<p>大家使用时可直接复制下面代码:
<code>
/* 白色背景,透明度0.6 */
.alpha60 {
  background: rgb(255, 255, 255);
  background: rgba(255, 255, 255, 0.6);
  background: transparent\9;
  zoom: 1;
  filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99ffffff, endColorstr=#99ffffff);
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#99ffffff, endColorstr=#99ffffff)";
}
</code>
最后来个效果图,顺便试试jsfiddle的嵌入:<br/>
<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/nMKGs/embedded/result,html,css/light/"></iframe></p>

<p>(2012-05-01 更新)<br/>
因为自己用的是Sass，所以封装了一下，Sass的功能很强大：<br/>
<a href="/blog/better-transparentize-mixin-for-sass">Sass中通过mixin封装透明背景模块</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML模板]]></title>
    <link href="http://fancyoung.com/blog/html-template/"/>
    <updated>2011-11-21T19:48:00+00:00</updated>
    <id>http://fancyoung.com/blog/html-template</id>
    <content type="html"><![CDATA[<p><div><script src='https://gist.github.com/1321460.js?file=html.html'></script>
<noscript><pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
  &lt;head&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
    &lt;title&gt;HTML template&lt;/title&gt;
    &lt;link href=&quot;http://blueprintcss.org/blueprint/screen.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
    &lt;style type=&quot;text/css&quot;&gt;
    &lt;/style&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.16/jquery-ui.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;container&quot;&gt;
    &lt;/div&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blueprint教程]]></title>
    <link href="http://fancyoung.com/blog/blueprint-tutorial/"/>
    <updated>2011-11-17T13:15:00+00:00</updated>
    <id>http://fancyoung.com/blog/blueprint-tutorial</id>
    <content type="html"><![CDATA[<p>翻译自: <a href="https://github.com/joshuaclayton/blueprint-css/wiki/Quick-start-tutorial">Blueprint CSS Framework Tutorial</a></p>

<p>Blueprint是个好框架，本教程会深入介绍你可以用它来做什么，也会说到什么时候不适合用。</p>

<h2>Blueprint简介</h2>

<p>Blueprint是一个CSS框架，为减少开发时间而设计。它可以构架起有坚实基础的CSS，其中包含合理的排版（typography）、可定制的网格(grid)、打印样式等。</p>

<p>但是Blueprint不是银弹，它适用于每个页面都需要独特的设计。在决定使用Blueprint前建议先看看Blueprint例子以决定是否适合你。你可以检出<code>tests</code>目录，里面例子展示大部分Blueprint样式。</p>

<p>“框架”这个词也许有些误导，Blueprint并不会建议你如何组织你的CSS文件。它更像一个工具箱，你可以从中选出你需要的。</p>

<!--more-->


<h2>结构概述</h2>

<p>自下而上的看Blueprint：</p>

<p>CSS布局：
CSS reset: 移除浏览器的默认规则。
Typography: 默认提供一些漂亮的排版和颜色。
Grid: 提供一组样式来制作网格。</p>

<p>第二部分是脚本。你可以它来自定义框架，可以是列数、宽度等外观，还可以是路径、命名空间等。我们有两个脚本：
1. Compressor: 用于压缩和自定义源文件。
2. Validator: 用于验证Blueprint核心文件。</p>

<p>以上是简单介绍，接下来让我们进入细节。首先，我们看看CSS部分。然后我们再介绍脚本，以及如何通过它数和自定制框架。</p>

<h2>设置Blueprint</h2>

<p>为了使用Blueprint，你必须包含以下三个文件在你的HTML中：</p>

<ul>
<li><code>blueprint/screen.css</code>: 主要文件，页面展示的样式都在里面。</li>
<li><code>blueprint/print.css</code>: 用于打印。</li>
<li><code>blueprint/ie.css</code>: 用于IE浏览器下的校正。</li>
</ul>


<p>在HTML中嵌入下面代码来引用（请确认路径正确）：
```
<link rel="stylesheet" href="css/blueprint/screen.css" type="text/css" media="screen, projection" />
<link rel="stylesheet" href="css/blueprint/print.css" type="text/css" media="print" /></p>

<!--[if lt IE 8]>
  <link rel="stylesheet" href="css/blueprint/ie.css" type="text/css" media="screen, projection" />
<![endif]-->


<p>```
（原文提示XHTML需要用"/>&ldquo;结束标签，上面代码中我已经直接加上了）</p>

<h2>使用Blueprint里的CSS</h2>

<p>之前已经提过，Blueprint有三个布局，前两个布局，CSS reset和默认排版用于设置默认HTML样式。所以你不需要更改这两个文件。如果你想更改全局字体大小等，建议你写在自己的CSS文件里，以便将来更新Blueprint版本。</p>

<h4>排版相关class</h4>

<p>While the typography of Blueprint mainly applies itself, there’s a few classes
provided. 下面是一个它们名字的列表和介绍它们的作用:</p>

<p><code>.hide</code>
隐藏元素<br/>
<code>.quiet</code>
使字体颜色柔和<br/>
<code>.loud</code>
黑色字体<br/>
<code>highlight</code>
黄色背景<br/>
<code>.added</code>
绿色背景<br/>
<code>.removed</code>
红色背景<br/>
<code>.first</code>
移除左侧margin/padding<br/>
<code>.last</code>
移除右侧margin/padding<br/>
<code>.top</code>
移除顶部margin/padding<br/>
<code>.bottom</code>
移除底部margin/padding</p>

<h4>表格样式</h4>

<p>Blueprint可以通过给输入元素加<code>.text</code>, <code>.title</code>类来控制，其中<code>.text</code>表示普通大小，<code>.title</code>提供一个大字体的输入框。</p>

<p>这里还有一些类可以用于成功或失败信息：</p>

<p><code>div.error</code>
建议一个失败框（红色）。<br/>
<code>div.notice</code>
建议一个提示框（黄色）。<br/>
<code>div.success</code>
建议一个成功框（绿色）。</p>

<h4>建立网格</h4>

<p>第三个布局是网格，是一个给你网站建立各样网格的工具。记住网格背后的大部分CSS都可以自定义（下面会讲到）。在这个部分我会使用默认设置。</p>

<p>默认网格有24列，每列宽30px，边距(margin)10px。总共宽为950px，适合1024x768的分辨率。如果你想要更窄的设计，可以看下面自定义网格一节。</p>

<p>怎么用Blueprint来建立网格呢？新建一个<code>&lt;div/&gt;</code>来代表一列，并且给它加一个<code>.span-x</code>的class。比如，如果你想要一个三列的布局，两窄一宽，并且包含头尾，可以参考下面的代码:
```</p>

<div class="container">
  <div class="span-24">
    头部
  </div>

  <div class="span-4">
    第一列
  </div>
  <div class="span-16">
    中间列
  </div>
  <div class="span-4 last">
    最后一列
  </div>
 
  <div class="span-24">
    尾部
  </div>
</div>


<p><code>``
此外，还有两个class你应该知道。首先，每个Blueprint页面应该包含在一个class为</code>.container`的div里，一般紧跟在body标签后。</p>

<p>第二，每行的最后一列（默认24列），应该用class<code>.last</code>来移除右侧的边距(margin)。可以参考<code>tests/parts/</code>里的例子。这些文件告诉了你Blueprint的网格能做些什么。</p>

<p>这里是一个其他网格相关class的快速概述：<br/>
<code>.append-x</code>
附加（在后面加）x条空列。<br/>
<code>.prepend-x</code>
追加（在前面）x条空列。<br/>
<code>.push-x</code>
推送x列到左侧。可用于切换列。<br/>
<code>.pull-x</code>
推送x列到右侧。可用于切换列。<br/>
<code>.border</code>
列右侧加分界线。<br/>
<code>.colborder</code>
建立新列，分界线在中部。<br/>
<code>.clear</code>
换行，无论是否有空。<br/>
<code>.showgrid</code>
给容器或列添加后能看见网格和基线。</p>

<p>在这个列表中，<code>x</code>用于append/prepend时范围是1-23，用于push/pull时是1-24。如果你自定义了新的列数，这个范围会随之变化。</p>

<p>下面是另一个例子，包含4列等宽，前两列间有分界线，后两列间也有，4列的中间有段空白。
```</p>

<div class="container">
  <div class="span-5 border">
    第一列
  </div>
  <div class="span-5 append-4">
    第二列
  </div>
  <div class="span-5 border">
    第三列
  </div>
  <div class="span-5 last">
    第四列
  </div>
</div>


<p>```</p>

<p>你也可以通过嵌套列来实现想要的布局。下面例子展现的是页面左半部有四个长方形，两上两下，右半部有一个长方形。
```</p>

<div class="container">
  <div class="span-12">
    <div class="span-6">
      左上
    </div>
    <div class="span-6 last">
      右上
    </div>
    <div class="span-6">
      左下
    </div>
    <div class="span-6 last">
      右下
    </div>
  </div>
  <div class="span-12 last">
    另一块
  </div>
</div>


<p><code>``
如果不理解可以在浏览器里尝试上面的代码。想看更过的如何使用class的例子，请看</code>/tests/parts/grid.html`。</p>

<h2>脚本</h2>

<p>Blueprint有两个脚本：一个用于压缩和自定义CSS，另一个是验证核心CSS文件，以免你修改了某些文件。</p>

<h4>验证器(The Validator)</h4>

<p>验证器的工作很简单——检查Blueprint核心CSS里的文件。脚本使用配套版本的W3C CSS验证器来完成。为了运行，你需要安装Ruby。然后你可以运行<code>$ ruby validate.rb</code>。</p>

<p>请注意Blueprint有几个验证错误。它们是已知的，来自于几个为了保持浏览器一致性的CSS hack。</p>

<h4>压缩器(The Compressor)</h4>

<p>你的HTML里引用压缩版的核心CSS文件时，当你做过修改，需要重新压缩。这是压缩器脚本的作用。</p>

<p>另外，你可以在这里自定义网格。为了自定义网格，需要使用一个特殊的设置文件，当你运行压缩器时，就会生成新的CSS。新压缩的文件将会使用你的设置。</p>

<p>你之需要重新运行脚本来重新压缩。这会解析核心CSS文件并在blueprint文件夹里生成新文件。与验证器一样，需要安装Ruby。在<code>lib</code>目录里执行<code>$ ruby compress.rb</code>。</p>

<p>执行这个文件会将<code>blueprint/src</code>下的文件合并成三个文件：<code>ie.css</code>, <code>print.css</code>, <code>screen.css</code>。<br/>
但是你可以通过加参数来改变行为。执行<code>$ ruby compress.rb -h</code>查看你可以使用的基本参数。</p>

<h4>自定义设置</h4>

<p>你可以阅读<code>lib/compress.rb</code>里的文档来学习如何自定义设置。</p>

<h2>参考</h2>

<p><a href="https://github.com/joshuaclayton/blueprint-css/wiki/Quick-start-tutorial">Blueprint CSS Framework Tutorial(官方原文)</a><br/>
<a href="http://blueprintcss.org/">官网</a><br/>
<a href="http://blueprintcss.org/tests/">Demo</a></p>
]]></content>
  </entry>
  
</feed>
